using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Configuration;
using System.Data.SqlClient;
using System.Diagnostics;
using AdHocCampaignRunner;

namespace AdHocCampaignExcelHelper
{
    class Program
    {
        static void Main(string[] args)
        {

            string excelFileRootPath = ConfigurationManager.AppSettings["OuptutRootFolderPath"].ToString().Trim();
            List<int> processedSessionsToSave = new List<int>();

            excelFileRootPath += "AdHocCallLists - " + DateTime.Now.Year.ToString() + "\\";

            string dailyFolder = DateTime.Now.ToString("yyyyMMdd") + @"/";
            string excelFileRootPathDaily = Path.Combine(excelFileRootPath, dailyFolder);

            string outputFilePathTemplate = String.Format("{0}{1}_{2}.xlsx", excelFileRootPathDaily, "{0}", DateTime.Now.ToString("yyyyMMdd"));

            string connStringCompliance = ConfigurationManager.ConnectionStrings["ComplianceConnectionString"].ToString().Trim();

            List<CampaignDetail> campaigns = null;
            List<int> processedSessions = null;
            bool foundNewPreviousIteration = false;
            bool firstRun = true;


            while (firstRun || foundNewPreviousIteration)
            {
                firstRun = false;
                foundNewPreviousIteration = false;
                campaigns = GetCampaignTablesForToday();
                processedSessions = Program.LoadProcessedSessionIds();

                foreach (CampaignDetail d in campaigns)
                {
                    if (!processedSessions.Contains(d.callListSessionId))
                    {
                        string campaignName = d.campaignName.Replace("AdHoc_", "");
                        string dialerTable = CampaignDefs.Campaigns[campaignName].DialerTable;
                        string excelFilePath = String.Format(CampaignDefs.Campaigns[campaignName].ExcelPathTemplate,
                            DateTime.Now.ToString("yyyyMMdd"));

                        CreateFile(dialerTable, excelFilePath);
                        foundNewPreviousIteration = true;
                    }
                    processedSessionsToSave.Add(d.callListSessionId);
                }
                SaveLastSessionId(processedSessionsToSave);
                processedSessionsToSave.Clear();
                campaigns.Clear();
                processedSessions.Clear();
            }
        }

        public static string CreateFile(string table, string filePath)
        {
            string fileFolder = Path.GetDirectoryName(filePath);

            if (!Directory.Exists(fileFolder))
                Directory.CreateDirectory(fileFolder);


            ProcessStartInfo start = new ProcessStartInfo();
            string scriptPath = ConfigurationManager.AppSettings["ExcelCreationScriptPath"].ToString();
            start.FileName = ConfigurationManager.AppSettings["PythonExePath"].ToString();
            string arguments = string.Format("Python.exe \"{0}\" {1} \"{2}\"", scriptPath, table, filePath);
            start.Arguments = string.Format("\"{0}\" {1} \"{2}\"", scriptPath, table, filePath);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = false; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
            Console.WriteLine(arguments);

            return "";
        }


        private static List<CampaignDetail> GetCampaignTablesForToday()
        {

            List<CampaignDetail> result = new List<CampaignDetail>();

            string query = @"SELECT  A.CampaignName, A.CallListSessionId FROM dbo.AdHocManifest A where DATEADD(day, DATEDIFF(day, 0, A.Created_At), 0) = DATEADD(day, DATEDIFF(day, 0, getdate()), 0) AND A.created_at <= DATEADD(MINUTE, -5, GETDATE()) ORDER BY A.callListSessionId";
            string connString = ConfigurationManager.ConnectionStrings["CallCampaignsConnectionString"].ToString();

            using (SqlConnection connection = new SqlConnection(connString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.CommandTimeout = 1500;
                command.Connection.Open();
                using (SqlDataReader oReader = command.ExecuteReader())
                {
                    while (oReader.Read())
                    {

                        result.Add(new CampaignDetail { campaignName = oReader["CampaignName"].ToString(), callListSessionId = Int32.Parse(oReader["CallListSessionId"].ToString()) });
                    }

                    connection.Close();
                }
            }

            return result;
        }

        private static List<int> LoadProcessedSessionIds()
        {
            List<int> result = new List<int>();
            string sessionFile = ConfigurationManager.AppSettings["LastSessionIdFilepath"].ToString();

            DateTime lastSessionFileSaveDate = File.GetLastWriteTime(sessionFile);
            if (lastSessionFileSaveDate.Date != DateTime.Now.Date)
                File.Delete(sessionFile);

            if (File.Exists(sessionFile))
            {
                try
                {
                    foreach (string s in File.ReadAllLines(sessionFile))
                        result.Add(Int32.Parse(s));
                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
            return result;
        }


        private static void SaveLastSessionId(List<int> processedSessions)
        {
            string sessionFile = ConfigurationManager.AppSettings["LastSessionIdFilepath"].ToString();
            if (!Directory.Exists(Path.GetDirectoryName(sessionFile)))
            {
                Directory.CreateDirectory(Path.GetDirectoryName(sessionFile));
            }


            List<string> list = new List<string>();
            foreach (int id in processedSessions)
                list.Add(id.ToString());

            File.WriteAllLines(sessionFile, list);

        }





    }



}
