        //mode 1 is standard PatientFocus data (accountid)
        //mode 2 is client data (accountcode)
        public static void OldFileLooper(string filename, int mode)
        {
            //here we can check the address before we do something with it
            Processor p = new Processor();
            List<string> verifiedList = new List<string>();
            List<string> fullList = new List<string>();
            List<MultipleAddressClass> trueFullList = new List<MultipleAddressClass>();

            List<Address> lstA = new List<Address>();

            bool hasaccount = false;
            exactmatch = 0;

            if (File.Exists(filename))
            {
                StreamReader sw = new StreamReader(filename);

                string line = String.Empty;

                int linecount = 0;

                verifiedList = p.ValidatedAddressList();
                fullList = p.FullAddressList();

                trueFullList = p.TrueFullAddressList();

                while ((line = sw.ReadLine()) != null)
                {
                    USPSManager um = new USPSManager(WebToolsClass.UserName, false);

                    if (linecount == 0)
                    {
                        //string[] headerLine = line.Split(new char[] { ',' });
                        //string[] headerLine = line.Split(new char[] { ',','\t'  });

                        string[] headerLine = line.Split(new char[] { '\t', '|' });

                        int tryparseint;

                        if (headerLine[0].ToString().ToUpper() == "ACCOUNTID")
                        {
                            hasaccount = true;
                        }

                        if (Int32.TryParse(headerLine[0], out tryparseint))
                        {
                            hasaccount = true;
                        }
                    }

                    if (linecount > 0)
                    {
                        //string[] splitLine = line.Split(new char[] { ',' });
                        //string[] splitLine = line.Split(new char[] { ',', '\t' });

                        if (line == "")
                        {
                        }
                        else if (line.ToLower().Contains("rows affected") || line.ToLower().Contains("row affected"))
                        {
                        }
                        else if (line.Substring(0, 5) == "-----")
                        {
                        }
                        else
                        {
                            string[] splitLine = line.Split(new char[] { '\t', '|' });

                            if (line.Trim() != "")
                            {
                                Address a = new Address();

                                bool doContinue = false;

                                if (hasaccount)
                                {
                                    if (splitLine[1].ToString().ToUpper() == "NULL")
                                    {
                                    }
                                    else
                                    {
                                        doContinue = true;
                                    }
                                }
                                else
                                {
                                    if (splitLine[0].ToString().ToUpper() == "NULL")
                                    {

                                    }
                                    else
                                    {
                                        doContinue = true;
                                    }
                                }

                                if (doContinue)
                                {
                                    if (hasaccount)
                                    {
                                        if (mode == 1)
                                        {
                                            a.AccountID = Convert.ToInt64(splitLine[0].Trim());
                                        }
                                        else
                                        {
                                            a.AccountCode = splitLine[0].Trim();
                                        }

                                        if (splitLine[1].Length > 38)
                                        {
                                            a.Address1 = splitLine[1].Trim().Substring(0, 38);
                                        }
                                        else
                                        {
                                            a.Address1 = splitLine[1].Trim();
                                        }

                                        if (splitLine[2].Length > 38)
                                        {
                                            a.Address2 = splitLine[2].Trim().Substring(0, 38);
                                        }
                                        else
                                        {
                                            a.Address2 = splitLine[2].Trim();
                                        }


                                        if (splitLine[3].Length > 15)
                                        {
                                            a.City = splitLine[3].Trim().PadRight(15).Substring(0, 15);
                                        }
                                        else
                                        {
                                            a.City = splitLine[3].Trim();
                                        }


                                        if (splitLine[4].Length > 2)
                                        {
                                            a.State = splitLine[4].Trim().Substring(0, 2);
                                        }
                                        else
                                        {
                                            a.State = splitLine[4].Trim();
                                        }

                                        if (splitLine[5].Length > 5)
                                        {
                                            a.Zip = splitLine[5].Trim().Substring(0, 5);
                                        }
                                        else
                                        {
                                            a.Zip = splitLine[5].Trim();
                                        }

                                        if (splitLine[6].Length > 4)
                                        {
                                            a.ZipPlus4 = splitLine[6].Trim().Substring(0, 4);
                                        }
                                        else
                                        {
                                            a.ZipPlus4 = splitLine[6].Trim();
                                        }

                                        if (mode == 2)
                                        {
                                            a.ClientCode = splitLine[7].Trim();
                                        }
                                    }
                                    else
                                    {
                                        if (splitLine[0].Length > 38)
                                        {
                                            a.Address1 = splitLine[0].Trim().Substring(0, 38);
                                        }
                                        else
                                        {
                                            a.Address1 = splitLine[0].Trim();
                                        }

                                        if (splitLine[1].Length > 38)
                                        {
                                            a.Address2 = splitLine[1].Trim().Substring(0, 38);
                                        }
                                        else
                                        {
                                            a.Address2 = splitLine[1].Trim();
                                        }

                                        if (splitLine[2].Length > 15)
                                        {
                                            a.City = splitLine[2].Trim().Substring(0, 15);
                                        }
                                        else
                                        {
                                            a.City = splitLine[2].Trim();
                                        }

                                        if (splitLine[3].Length > 2)
                                        {
                                            a.State = splitLine[3].Trim().Substring(0, 2);
                                        }
                                        else
                                        {
                                            a.State = splitLine[3].Trim();
                                        }

                                        if (splitLine[4].Length > 5)
                                        {
                                            a.Zip = splitLine[4].Trim().Substring(0, 5);
                                        }
                                        else
                                        {
                                            a.Zip = splitLine[4].Trim();
                                        }

                                        if (splitLine[5].Length > 4)
                                        {
                                            a.ZipPlus4 = splitLine[5].Trim().Substring(0, 4);
                                        }
                                        else
                                        {
                                            a.ZipPlus4 = splitLine[5].Trim();
                                        }

                                    }

                                    //change a 0 zip to a blank
                                    /*
                                    if (a.Zip == "0")
                                    {
                                        a.Zip = "";
                                    }
                                    */

                                    a.BuildFullAddressString();

                                    Address validatedAddress=new Address();

                                    //if address is already verified, don't do it again
                                    if (!(fullList.Contains(a.FullAddressString)))
                                    {
                                        if (!(verifiedList.Contains(a.FullAddressString)))
                                        {
                                            //additional address check  - BW 10/4/16
                                            POBoxAptLotSwitcher(a);

                                            validatedAddress = um.ValidateAddress(a);
                                            DoTheVerifyAddressStuff(a, validatedAddress);
                                        }
                                        else
                                        {
                                            //address is unverified - let's see if we can check it again
                                        }

                                        lstA.Add(a);

                                        validatedAddress.AccountID = a.AccountID;
                                        p.SaveNewAddress(a.OriginalFullAddressString, a.Address1, a.Address2, a.City, a.State, a.Zip, a.FullAddressString, a.Verified, validatedAddress.Address1, validatedAddress.Address2, validatedAddress.City, validatedAddress.State, validatedAddress.Zip, validatedAddress.AccountID );
                                    }
                                    else
                                    {
                                        //still want to supply the address verification update script
                                        MultipleAddressClass ac = trueFullList.Find(x => x.OriginalAddress == a.OriginalFullAddressString);

                                        if (ac != null)
                                        {
                                            lstA.Add(a);
                                        }
                                    }
                                }
                            }

                            if (linecount % 1000 == 0)
                            {
                                Console.Out.WriteLine("(" + linecount + " lines read)");

                            }
                        }
                    }

                    um = null;
                    linecount++;

#if DEBUG
                    /*
                    if (linecount == 500)
                    {
                        break;
                    }
                     */
#endif

                }

                sw.Close();

                //Console.Out.Write(lstA.ToString());

                string filenamestart = new FileInfo(filename).Name;
                filenamestart=filenamestart.Substring(0, filenamestart.IndexOf("."));

                string returnedFilename = "";

                if (Environment.MachineName.ToUpper() == "PFWSQLDEV01")
                {
                    returnedFilename = @"c:\apps\" + filenamestart + "_returned_" + DateTime.Now.Month.ToString() + "." + DateTime.Now.Day.ToString() + "." + DateTime.Now.Year.ToString() + "." + DateTime.Now.Hour.ToString() + "." + DateTime.Now.Minute.ToString() + "." + DateTime.Now.Second.ToString() + "." + DateTime.Now.Millisecond.ToString() + ".txt";
                }
                else if (Environment.MachineName.ToUpper().StartsWith("PF"))
                {
                    returnedFilename = @"c:\usps\" + filenamestart + "_returned_" + DateTime.Now.Month.ToString() + "." + DateTime.Now.Day.ToString() + "." + DateTime.Now.Year.ToString() + "." + DateTime.Now.Hour.ToString() + "." + DateTime.Now.Minute.ToString() + "." + DateTime.Now.Second.ToString() + "." + DateTime.Now.Millisecond.ToString() + ".txt";
                }
                {
                    returnedFilename = @"c:\usps\" + filenamestart + "_returned_" + DateTime.Now.Month.ToString() + "." + DateTime.Now.Day.ToString() + "." + DateTime.Now.Year.ToString() + "." + DateTime.Now.Hour.ToString() + "." + DateTime.Now.Minute.ToString() + "." + DateTime.Now.Second.ToString() + "." + DateTime.Now.Millisecond.ToString() + ".txt";
                }

                try
                {
                    StreamWriter swReturned = new StreamWriter(returnedFilename);

                    string thedelimiter = "||";

                    if (hasaccount)
                    {
                        if (mode == 1)
                        {
                            swReturned.WriteLine("Account ID" + thedelimiter + "Original Address" + thedelimiter + "Returned Address" + thedelimiter + "Verified" + thedelimiter + "Match?" + thedelimiter + "SQL");
                        }
                        else
                        {
                            swReturned.WriteLine("Account Code" + thedelimiter + "Original Address" + thedelimiter + "Returned Address" + thedelimiter + "Verified" + thedelimiter + "Match?" + thedelimiter + "SQL");
                        }

                    }
                    else
                    {
                        swReturned.WriteLine("Original Address" + thedelimiter + "Returned Address" + thedelimiter + "Verified" + thedelimiter + "Match?");
                    }

                    foreach (Address a in lstA)
                    {
                        if (hasaccount)
                        {
                            if (a.Verified)
                            {
                                if ((a.FullAddressString.ToUpper().Substring(0, a.FullAddressString.Length - 5) == a.OriginalFullAddressString.ToUpper()) && (a.FullAddressString.ToUpper().Substring(a.FullAddressString.Length - 5, 5).Contains("-")))
                                {
                                    if (mode == 1)
                                    {
                                        swReturned.WriteLine(a.AccountID.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "True" + thedelimiter + "");
                                    }
                                    else
                                    {
                                        swReturned.WriteLine(a.AccountCode.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "True" + thedelimiter + "");
                                    }
                                }
                                else if (a.FullAddressString.ToUpper() == a.OriginalFullAddressString.ToUpper())
                                {
                                    if (mode == 1)
                                    {
                                        swReturned.WriteLine(a.AccountID.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "True" + thedelimiter + "");
                                    }
                                    else
                                    {
                                        swReturned.WriteLine(a.AccountCode.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "True" + thedelimiter + "");
                                    }
                                }
                                else
                                {
                                    if (a.NewAddress2 != "" && a.NewAddress1 == "")
                                    {
                                        if ((a.FullAddressString.ToUpper().Substring(0, a.FullAddressString.Length - 5) == a.OriginalFullAddressString.ToUpper()) && (a.FullAddressString.ToUpper().Substring(a.FullAddressString.Length - 5, 5).Contains("-")))
                                        {
                                            if (mode == 1)
                                            {
                                                swReturned.WriteLine(a.AccountID.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "update Account set maddress1='" + a.NewAddress2 + "', maddress2='" + a.NewAddress1 + "', mcity='" + a.NewCity + "', mstate='" + a.NewState + "',mzip='" + a.NewZip + "' where AccountID='" + a.AccountID.ToString() + "'");
                                            }
                                            else
                                            {
                                                swReturned.WriteLine(a.AccountCode.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "update qa.ClientRawData set [USPS Patient Address 1]='" + a.NewAddress2 + "', [USPS Patient Address 2]='" + a.NewAddress1 + "', [USPS Patient City]='" + a.NewCity + "', [USPS Patient State]='" + a.NewState + "',[USPS Patient Zip]='" + a.NewZip + "' where [Account Code]='" + a.AccountCode.ToString() + "' and ClientCode='" + a.ClientCode + "'");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (mode == 1)
                                        {
                                            swReturned.WriteLine(a.AccountID.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "update Account set maddress1='" + a.NewAddress1 + "', maddress2='" + a.NewAddress2 + "', mcity='" + a.NewCity + "', mstate='" + a.NewState + "',mzip='" + a.NewZip + "' where AccountID='" + a.AccountID.ToString() + "'");
                                        }
                                        else
                                        {
                                            swReturned.WriteLine(a.AccountCode.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "update qa.ClientRawData set [USPS Patient Address 1]='" + a.NewAddress1 + "', [USPS Patient Address 2]='" + a.NewAddress2 + "', [USPS Patient City]='" + a.NewCity + "', [USPS Patient State]='" + a.NewState + "',[USPS Patient Zip]='" + a.NewZip + "' where [Account Code]='" + a.AccountCode.ToString() + "' and ClientCode='" + a.ClientCode + "'");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (mode == 1)
                                {
                                    swReturned.WriteLine(a.AccountID.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "");
                                }
                                else
                                {
                                    swReturned.WriteLine(a.AccountCode.ToString() + thedelimiter + a.OriginalFullAddressString + thedelimiter + a.FullAddressString + thedelimiter + a.Verified + thedelimiter + "False" + thedelimiter + "");
                                }
                            }
                        }
                        else
                        {
                            swReturned.WriteLine(a.OriginalFullAddressString + thedelimiter + a.FullAddressString + " " + thedelimiter + a.Verified + " " + thedelimiter + "False" + thedelimiter + " " + thedelimiter);
                        }
                    }

                    swReturned.Close();
                }
                catch (Exception ex)
                {
                    Console.Out.WriteLine("output file write failure" + ex.Message + "-" + ex.StackTrace);
                    Console.Out.WriteLine("");
                }

                Console.Out.WriteLine(lstA.Count.ToString() + " total lines");
                Console.Out.WriteLine(lstA.Count(x => x.Verified).ToString() + " verified lines");

                Console.Out.WriteLine("");

                

            }
            else
            {
                Console.Out.WriteLine("File " + filename + " does not exist");
                Console.Out.WriteLine("Also, the file you use must have the following formatting of headers and rows: ");
                Console.Out.WriteLine("Address1, Address2, City, State, Zip, Zip4 OR");
                Console.Out.WriteLine("AccountID, Address1, Address2, City, State, Zip, Zip4");

                Console.Out.WriteLine("");
            }

            Console.Out.WriteLine("Good Address Count: " + lstA.Count(x => x.Verified == true));
            Console.Out.WriteLine("Bad Address Count: " + lstA.Count(x => x.Verified == false));
            Console.Out.WriteLine("Exact Address Count: " + exactmatch.ToString());


            Console.Out.WriteLine("");
            Console.Out.WriteLine("");
            Console.Out.WriteLine("");
            Console.Out.WriteLine("");
        }
